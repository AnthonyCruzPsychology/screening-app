{"version":3,"sources":["index.js"],"names":["questions","Question","this","props","questionIndex","decision","React","Component","Button","onClick","value","Screen","state","buttonValue","newQuestionIndex","newDecision","setState","className","handleClick","id","renderButtons","ReactDOM","render","document","getElementById"],"mappings":"+NAIMA,EAAY,CAChB,0EACA,kFACA,qEACA,gGACA,oEAGIC,E,4JACJ,WACE,OAAoC,IAA7BC,KAAKC,MAAMC,cAAsB,6BAAKJ,EAAUE,KAAKC,MAAMC,iBAAuB,0CAAaF,KAAKC,MAAME,SAAxB,W,GAFtEC,IAAMC,WAMvBC,E,4JACJ,WACI,OACI,wBAAQC,QAASP,KAAKC,MAAMM,QAA5B,SACKP,KAAKC,MAAMO,Y,GAJLJ,IAAMC,WAUrBI,E,kDACJ,WAAYR,GAAQ,IAAD,8BACjB,cAAMA,IACDS,MAAQ,CACXR,cAAe,EACfC,SAAU,OAJK,E,+CAQnB,SAAYQ,GACV,IAAIC,EACAC,EAAcb,KAAKU,MAAMP,SAET,OAAhBQ,GACFC,EAAmB,EACnBC,EAAc,MACW,UAAhBF,GACTC,EAAmB,EACnBC,EAAc,OACW,YAAhBF,GACTC,EAAmBZ,KAAKU,MAAMR,cAAgB,EAC9CW,EAAc,SAEdD,EAAmBZ,KAAKU,MAAMR,cAAgB,EAIhDF,KAAKc,SACH,CAACZ,cAAeU,EAChBT,SAAUU,M,2BAId,WAAiB,IAAD,OACd,OAAiC,IAA7Bb,KAAKU,MAAMR,cAEX,sBAAKa,UAAU,YAAf,UACE,cAACT,EAAD,CAAQE,MAAM,KAAKD,QAAS,kBAAM,EAAKS,YAAY,SACnD,cAACV,EAAD,CAAQE,MAAM,UAAUD,QAAS,kBAAM,EAAKS,YAAY,cACxD,cAACV,EAAD,CAAQE,MAAM,MAAMD,QAAS,kBAAM,EAAKS,YAAY,aAKtD,qBAAKD,UAAU,YAAf,SACE,cAACT,EAAD,CAAQE,MAAM,QAAQD,QAAS,kBAAM,EAAKS,YAAY,gB,oBAM9D,WACE,OACE,sBAAKC,GAAG,SAAR,UACE,cAAClB,EAAD,CAAUG,cAAeF,KAAKU,MAAMR,cAAeC,SAAUH,KAAKU,MAAMP,WACvEH,KAAKkB,uB,GAvDOd,IAAMC,WA6D3Bc,IAASC,OACL,cAACX,EAAD,IACAY,SAASC,eAAe,W","file":"static/js/main.11daaba3.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst questions = [\n  \"Does the study include healthy young or middle-aged adult participants?\",\n  \"Does the study involve a category learning task with novel category structures?\",\n  \"Does the study compare post-learning and pre-learning neural data?\",\n  \"Does the study use functional neuroimaging during a task that is unrelated to categorization?\",\n  \"Does the study use an experimental or quasi-experimental design?\",\n];\n\nclass Question extends React.Component {\n  render () {\n    return this.props.questionIndex !== 5 ? <h3>{questions[this.props.questionIndex]}</h3> : <h3>Choose \"{this.props.decision}\"</h3>;\n  }\n}\n\nclass Button extends React.Component {\n  render() {\n      return (\n          <button onClick={this.props.onClick}>\n              {this.props.value}\n          </button>\n      );\n  }\n};\n\nclass Screen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionIndex: 0,\n      decision: \"Yes\",\n    }\n  }\n\n  handleClick(buttonValue) {\n    let newQuestionIndex;\n    let newDecision = this.state.decision;\n\n    if (buttonValue === \"No\") {\n      newQuestionIndex = 5;\n      newDecision = \"No\";\n    } else if (buttonValue === \"Reset\") {\n      newQuestionIndex = 0;\n      newDecision = \"Yes\";\n    } else if (buttonValue === \"Unclear\") {\n      newQuestionIndex = this.state.questionIndex + 1;\n      newDecision = \"Maybe\";\n    } else {\n      newQuestionIndex = this.state.questionIndex + 1;\n    }\n\n\n    this.setState(\n      {questionIndex: newQuestionIndex,\n      decision: newDecision}\n    );\n  }\n\n  renderButtons() {\n    if (this.state.questionIndex !== 5) {\n      return(\n        <div className=\"buttonRow\">\n          <Button value=\"No\" onClick={() => this.handleClick(\"No\")}/>\n          <Button value=\"Unclear\" onClick={() => this.handleClick(\"Unclear\")}/>\n          <Button value=\"Yes\" onClick={() => this.handleClick(\"Yes\")}/>\n        </div>\n      )\n    } else {\n      return(\n        <div className=\"buttonRow\">\n          <Button value=\"Reset\" onClick={() => this.handleClick(\"Reset\")} />\n        </div>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"screen\">\n        <Question questionIndex={this.state.questionIndex} decision={this.state.decision} />\n        {this.renderButtons()}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n    <Screen />,\n    document.getElementById('root')\n);"],"sourceRoot":""}